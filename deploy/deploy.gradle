apply plugin: "signing"
apply plugin: "maven-publish"

task androidSourcesJar(type: Jar) {
    archiveClassifier.set('sources')
    from android.sourceSets.main.java.srcDirs
}

afterEvaluate {
    // See https://developer.android.com/studio/build/maven-publish-plugin
    // and https://docs.gradle.org/current/userguide/publishing_maven.html
    // and https://proandroiddev.com/android-maven-publish-for-your-libraries-b76ad47677df
    publishing {
        // Creates a Maven publication called "release".
        publications {
            release(MavenPublication) {
                artifact androidSourcesJar
                artifact bundleReleaseAar

                groupId "${group_id}"
                artifactId "${project.name}"
                version getPublishVersion()

                pom {
                    name = project.name
                    packaging = "aar"
                    description = "An abstract API client library build on top of Okhttp library to ease the process of making various server request"
                    url = "https://github.com/tinglesoftware/kotlin-apiclients"

                    scm {
                        url = "https://github.com/tinglesoftware/kotlin-apiclients"
                        connection = "scm:git:github.com/tinglesoftware/kotlin-apiclients"
                        developerConnection = "scm:git:ssh://github.com/tinglesoftware/kotlin-apiclients.git"
                    }

                    licenses {
                        license {
                            name = "MIT License"
                            url = "https://raw.githubusercontent.com/tinglesoftware/kotlin-apiclients/main/LICENSE"
                            distribution = "repo"
                        }
                    }

                    developers {
                        developer {
                            id = "tingle-software"
                            name = "Tingle Software"
                            email = "info@tingle.software"
                        }
                    }
                }

                pom.withXml {
                    final dependenciesNode = asNode().appendNode("dependencies")
                    ext.addDependency = { dep, scope ->
                        logger.lifecycle("updating dep $dep")
                        if (dep.group == null || dep.version == null || dep.name == null || dep.name == "unspecified") {
                            return // invalid dependencies should be ignored
                        }

                        final depGroup = dep.group
                        final depName = dep.name
                        final depVersion = dep.version

                        final dependencyNode = dependenciesNode.appendNode("dependency")
                        dependencyNode.appendNode("groupId", depGroup)
                        dependencyNode.appendNode("artifactId", depName)
                        dependencyNode.appendNode("version", depVersion)
                        dependencyNode.appendNode("scope", scope)

                    }
                    configurations.api.getDependencies().each { dep -> addDependency(dep, "compile") }
                    configurations.implementation.getDependencies().each { dep -> addDependency(dep, "runtime") }
                }
            }
        }

        repositories {
            maven {
                url getPublishUrl()
                credentials {
                    username getPublishUsername()
                    password getPublishPassword()
                }
            }
        }
    }
}

signing {
    sign publishing.publications
}

artifacts {
    archives androidSourcesJar
}